<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chargoyao</title>
  
  <subtitle>姚东博客</subtitle>
  <link href="https://chargoyao.github.io/atom.xml" rel="self"/>
  
  <link href="https://chargoyao.github.io/"/>
  <updated>2020-09-09T16:19:10.294Z</updated>
  <id>https://chargoyao.github.io/</id>
  
  <author>
    <name>chargo yao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react useEffect</title>
    <link href="https://chargoyao.github.io/2020/09/08/react-useEffect/"/>
    <id>https://chargoyao.github.io/2020/09/08/react-useEffect/</id>
    <published>2020-09-08T15:46:21.000Z</published>
    <updated>2020-09-09T16:19:10.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Single-Responsiblility"><a href="#Single-Responsiblility" class="headerlink" title="Single Responsiblility"></a>Single Responsiblility</h1><p>在开发基于hook的react运用的时候可以在Function component中使用多个useEffect,既然是基于function component来组织react代码，有一个基本原则还是需要去留意的，<strong>它就是单一职责</strong>。<br>将useEffect拆分为更小的职责更单一的函数，有利于防止&#39;意外&#39;的发生，尤其在使用dependency array的时候。<br>举个的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Hello = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = useState&lt;<span class="built_in">number</span>&gt;(<span class="number">20</span>);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;name changed&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;age changed&quot;</span>);</span><br><span class="line">  &#125;, [name, age]);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleChangeName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setName(<span class="string">&quot;joyce&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleChangeAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setAge(<span class="number">40</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      name: &lt;span&gt;&#123;name&#125;&lt;/span&gt;</span><br><span class="line">      age: &lt;span&gt;&#123;age&#125;&lt;/span&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleChangeName&#125;&gt;change name&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleChangeAge&#125;&gt;change age&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如上代码，当name和age任何一个值改变的时候，都会触发更新(例子中表现为两个console.log都会被打印出来)，这显然是不太妥当的写法。应该只在name改变的时候打印&#39;name changed&#39;age改变的时候打印&#39;age changed&#39;。<br>所以应该把useEffect拆分为更小且职责更单一的函数。如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Hello = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = useState&lt;<span class="built_in">number</span>&gt;(<span class="number">20</span>);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;name changed&quot;</span>);</span><br><span class="line">  &#125;, [name]);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;age changed&quot;</span>);</span><br><span class="line">    <span class="comment">// console.log(&quot;age changed&quot;);</span></span><br><span class="line">  &#125;, [age]);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleChangeName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setName(<span class="string">&quot;joyce&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleChangeAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setAge(<span class="number">40</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      name: &lt;span&gt;&#123;name&#125;&lt;/span&gt;</span><br><span class="line">      age: &lt;span&gt;&#123;age&#125;&lt;/span&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleChangeName&#125;&gt;change name&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleChangeAge&#125;&gt;change age&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在上述例子中，如果name和age的状态在需求开发中是两个完全独立的，更好的方式，应该是将name的状态和age状态，分别独立出来写成custom hook的形式。这样代码在可读性和维护性上也会更好。</strong></p><h1 id="在useEffect中使用条件判断语句"><a href="#在useEffect中使用条件判断语句" class="headerlink" title="在useEffect中使用条件判断语句"></a>在useEffect中使用条件判断语句</h1><p>当你在useEffect中使用条件语句的时候，有一些细节问题可能你并未能注意到。来举个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Hello = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = useState&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="comment">// num小于5的时候执行某些操作。</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;设置某些操作或者状态&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 在num更新更新之后，清除上一次的操作或者状态。</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [num]);</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setNum(num + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &lt;div onClick=&#123;handleClick&#125;&gt;<span class="built_in">number</span>: &#123;num&#125;&lt;/div&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello;</span><br></pre></td></tr></table></figure><p>如上示例代码，在每次点击div元素的时候num状态进行累加，当num小于3的时候执行某些状态的设置操作等等，这里要表达的需求大致是，当num小于3的时候执行订阅或者状态的设置，随后在num更新之后清除上一次的订阅或者状态设置。<br>可是以上示例的代码虽然在表现上符合我们的预期，但是，在后续累加大于等于3之后useEffect返回的函数都会被执行。这显然是存在代码冗余执行的问题。所以在useEffect面临条件判断的场景下，可以显示return来防止此类问题。如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Hello = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = useState&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num &gt;= <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 在num更新更新之后，清除上一次的操作或者状态。</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [num]);</span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setNum(num + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &lt;div onClick=&#123;handleClick&#125;&gt;<span class="built_in">number</span>: &#123;num&#125;&lt;/div&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Hello;</span><br></pre></td></tr></table></figure><p>这样当num大于等于3之后，useEffect将不会执行相关的&#39;清理&#39;操作，更符合预期效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Single-Responsiblility&quot;&gt;&lt;a href=&quot;#Single-Responsiblility&quot; class=&quot;headerlink&quot; title=&quot;Single Responsiblility&quot;&gt;&lt;/a&gt;Single Responsiblili</summary>
      
    
    
    
    <category term="react" scheme="https://chargoyao.github.io/categories/react/"/>
    
    
    <category term="react hook" scheme="https://chargoyao.github.io/tags/react-hook/"/>
    
  </entry>
  
  <entry>
    <title>tree shaking</title>
    <link href="https://chargoyao.github.io/2020/09/06/tree-shaking/"/>
    <id>https://chargoyao.github.io/2020/09/06/tree-shaking/</id>
    <published>2020-09-06T14:30:11.000Z</published>
    <updated>2020-09-06T16:07:58.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h1><p>webpack通过借鉴rollup开始在webpack2中支持Tree Shaking，在webpack4中是默认支持Tree Shaking，如果你在打包的时候设置mode为production，webpack就会默认开启Tree Shaking。<br>使用方法：<br>1.webpack mode属性设置为production<br>2..babelrc里设置modules: false</p><h1 id="什么是Tree-Shaking-摇树优化？翻译起来感觉实在是怪"><a href="#什么是Tree-Shaking-摇树优化？翻译起来感觉实在是怪" class="headerlink" title="什么是Tree Shaking?(摇树优化？翻译起来感觉实在是怪)"></a>什么是Tree Shaking?(摇树优化？翻译起来感觉实在是怪)</h1><p>一个模块中可能有多个方法，在这种情况下，只要其中的方法使用到了，则整个文件都被会打包到bundle里面去，<br>tree shaking就是只把用到的方法打包进bundle，没用到的方法会被remove掉。</p><p>要了解tree Shaking的原理首先必须要提的是Dead Code Elimination(死码消除)，DCE是一种编译优化技术，它的用途是移除对程序运行结果没有任何影响的代码。</p><h1 id="哪些是对于程序运行没有任何影响的代码呢？"><a href="#哪些是对于程序运行没有任何影响的代码呢？" class="headerlink" title="哪些是对于程序运行没有任何影响的代码呢？"></a>哪些是对于程序运行没有任何影响的代码呢？</h1><p>1.代码不会被执行，且无法到达，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;unused code&#x27;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.代码的执行结果没有被用到<br>比如你写了一个函数，这个函数返回一个结果，这个结果的值在代码中并未使用到，或者你调用这个函数赋值给一个变量，但是变量的值却没有在代码中使用。<br>3.死变量<br>你写了一系列的代码去改变你声明的变量的值，但是最后变量并没有在代码中被用到。</p><p>以上的情况统称为DCE，tree Shaking也是利用了这些特性从而来判断哪些代码是dead code从而删除它。</p><h1 id="Tree-Shaking的原理"><a href="#Tree-Shaking的原理" class="headerlink" title="Tree Shaking的原理"></a>Tree Shaking的原理</h1><p>tree shaking其实就是利用了ES module的特点来进行shake<br>1.只能作为模块顶层的语句出现<br>2.import的模块名字只能是字符串常量，也就是说你不能动态的去设置import的内容<br>3.import的binding是不可变的<br><strong>显然commonJS是不具备ES6的特点的</strong>，commonJS是可以动态的require。在不同的条件下去require不同的模块。Tree shaking最本质的是对模块的代码进行静态的分析,因此Tree Shaking需要ES6这样的模块特性。<br>也就是说在代码编译阶段就要确定哪些代码是你需要的或者必须的，而不能在代码运行的时候再进行分析哪些代码是需要的。Tree shaking知道哪些代码没用之后会增加注释和标记，然后会在uglify阶段进行remove的操作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tree-Shaking&quot;&gt;&lt;a href=&quot;#Tree-Shaking&quot; class=&quot;headerlink&quot; title=&quot;Tree Shaking&quot;&gt;&lt;/a&gt;Tree Shaking&lt;/h1&gt;&lt;p&gt;webpack通过借鉴rollup开始在webpack2中支</summary>
      
    
    
    
    <category term="webpack" scheme="https://chargoyao.github.io/categories/webpack/"/>
    
    
    <category term="tree shaking" scheme="https://chargoyao.github.io/tags/tree-shaking/"/>
    
  </entry>
  
</feed>
